<!DOCTYPE html>
<html>
<head>
	<title>Interdude | Mock Interviews</title>
	<link rel="stylesheet" href="vendor/bootstrap.min.css">
	<!-- Changed by MarinaF -->
	<script src="/AgoraRTCSDK-2.2.0.js"></script>
	<script src="/vendor/jquery.js"></script>
	<!-- Compiled and minified CSS -->
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">

	<!-- Compiled and minified JavaScript -->
	<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>

	<link rel="stylesheet" href="/css/main/fonts.css">
	<link rel="stylesheet" href="/css/main/home.css">
</head>

<body>
	<div class="hidden" style="display: none;">
		<div id="div_device" class="panel panel-default">
			<div class="select">
				<label for="audioSource">Audio source: </label><select id="audioSource"></select>
			</div>
			<div class="select">
				<label for="videoSource">Video source: </label><select id="videoSource"></select>
			</div>
		</div>

	</div>
	
	<div id="div_join" class="panel panel-default" style="display: none;">
		<div class="panel-body">
		<div class="hidden" style="display: none;">
			App ID: <input id="key"  type="hidden" placeholder="Enter App ID" value="727e55e7645943f6942290e377274f29" size="36"></input>
			Channel: <input id="channel" type="text" value="test" size="4"></input>
		</div>
		<!--Host: <input id="video" type="checkbox" checked></input>-->
			<button id="join" class="btn btn-primary" onclick="join()">Join</button>
			<button id="leave" class="btn btn-primary" onclick="leave()">Leave</button>
			<button id="muteAudio" class="btn btn-primary" onclick="muteAudio()">Mute</button>
			<button id="unmuteAudio" class="btn btn-primary" onclick="unmuteAudio()">Unmute</button>
			<button id="enableVideo" class="btn btn-primary" onclick="enableVideo()">Enable Video</button>
			<button id="disableVideo" class="btn btn-primary" onclick="disableVideo()">Disable Video</button>

		</div>

	</div>

	<div class="container">
        <div class="row">
            <div class="col s6">
                <h1 class="mainTitle">INTER<span class="boldMainTitle">DUDE</span> </h1>
                <p class="mainInfo">PREPARE FOR THE SUPERDREAM PACKAGE</p>
            </div>

            <div class="col offset-s3 s3 right-align">
                <ul class="collapsible right-align hoverable">
                    <li onclick="join()">
                        <div class="collapsible-header">

						<div class="right-align" style="text-align: right !important;">
							<div class="txt" style="text-align: right !important; align-items: right;">
								<p style="text-align: right !important; padding-left: 10px;"><b>Ansh Mehra</b></p>       
							</div>
						</div>
                        
                        </div>                 
                        <div class="collapsible-body"><p>Lorem ipsum dolor sit amet.</p></div>
                    </li>
                </ul>
            </div>
        </div>

		<div class="row mainScreen">
			<div class="col s6" style="background-color: #373737; min-height: 450px;">
				<div id="video" style="margin:0 auto;">
					<div id="agora_local" style="float:right;width:180px;height:150px;display:inline-block; z-index: 999;"></div>
				</div>
			</div>	

			<div class="col s6">
				<div class="quesTile" style="position: relative;">
					<p id="questionNum" style="color: #9f9f9f;"><b>Question <span id="countQues"></span> out of 5</b> </p>
					<h3 id="questionName"></h3>

					<div class="bottomPlace" style="position: absolute; bottom: 0;">
						<div class="input-field col s12" style="padding: 0;">
							<input id="marks" name="marks" type="hidden" class="validate">
							<label for="marks">Marks</label>
						</div>

						<button type="submit" class="waves-effect waves-light btn " style="background-color: #dd5353; width: 100%;" disabled id="leave">LEAVE INTERVIEW</button>
					</div>
				</div>

				<div class="answerTile" style="">
					
				</div>
			</div>
		</div>

		<div class="row">
			{{!-- <h4>TIME REMAINING</h>
			<h2 class="timeNow">09:56</h2> --}}

			<button type="submit" onclick="join()" class="waves-effect waves-light btn grey darken-3" id="beginInter">BEGIN VIDEO CALL</button>
		</div>
    </div>

	

	<script language="javascript">

		if(!AgoraRTC.checkSystemRequirements()) {
			alert("browser does not support webRTC");
		}

		/* select Log type */
		// AgoraRTC.Logger.setLogLevel(AgoraRTC.Logger.NONE);
		// AgoraRTC.Logger.setLogLevel(AgoraRTC.Logger.ERROR);
		// AgoraRTC.Logger.setLogLevel(AgoraRTC.Logger.WARNING);
		// AgoraRTC.Logger.setLogLevel(AgoraRTC.Logger.INFO);
		// AgoraRTC.Logger.setLogLevel(AgoraRTC.Logger.DEBUG);

		/* simulated data to proof setLogLevel() */
		AgoraRTC.Logger.error('this is error');
		AgoraRTC.Logger.warning('this is warning');
		AgoraRTC.Logger.info('this is info');
		AgoraRTC.Logger.debug('this is debug');

		var client, localStream, camera, microphone;

		var audioSelect = document.querySelector('select#audioSource');
		var videoSelect = document.querySelector('select#videoSource');

		function join() {
			
		document.getElementById("join").disabled = true;
		//document.getElementById("video").disabled = true;
		var channel_key = null;

		console.log("Init AgoraRTC client with vendor key: " + key.value);
		client = AgoraRTC.createClient({mode: "interop"});

		client.init(key.value, function () {
			console.log("AgoraRTC client initialized");
			client.join(channel_key, channel.value, null, function(uid) {
			console.log("User " + uid + " join channel successfully");

			camera = videoSource.value;
			microphone = audioSource.value;
			localStream = AgoraRTC.createStream({streamID: uid, audio: true, cameraId: camera, microphoneId: microphone, video: true, screen: false});
			//localStream = AgoraRTC.createStream({streamID: uid, audio: false, cameraId: camera, microphoneId: microphone, video: false, screen: true, extensionId: 'minllpmhdgpndnkomcoccfekfegnlikg'});
			if (document.getElementById("video").checked) {
				localStream.setVideoProfile('720p_3');

			}

			// The user has granted access to the camera and mic.
			localStream.on("accessAllowed", function() {
				console.log("accessAllowed");
			});

			// The user has denied access to the camera and mic.
			localStream.on("accessDenied", function() {
				console.log("accessDenied");
			});

			localStream.init(function() {
				console.log("getUserMedia successfully");
				localStream.play('agora_local');

				client.publish(localStream, function (err) {
				console.log("Publish local stream error: " + err);
				});

				client.on('stream-published', function (evt) {
				console.log("Publish local stream successfully");
				});
			}, function (err) {
				console.log("getUserMedia failed", err);
			});
			}, function(err) {
			console.log("Join channel failed", err);
			});
		}, function (err) {
			console.log("AgoraRTC client init failed", err);
		});

		channelKey = "";
		client.on('error', function(err) {
			console.log("Got error msg:", err.reason);
			if (err.reason === 'DYNAMIC_KEY_TIMEOUT') {
			client.renewChannelKey(channelKey, function(){
				console.log("Renew channel key successfully");
			}, function(err){
				console.log("Renew channel key failed: ", err);
			});
			}
		});


		client.on('stream-added', function (evt) {
			var stream = evt.stream;
			console.log("New stream added: " + stream.getId());
			console.log("Subscribe ", stream);
			client.subscribe(stream, function (err) {
			console.log("Subscribe stream failed", err);
			});
		});

		client.on('stream-subscribed', function (evt) {
			var stream = evt.stream;
			console.log("Subscribe remote stream successfully: " + stream.getId());
			if ($('div#video #agora_remote'+stream.getId()).length === 0) {
			$('div#video').append('<div class="agora_remote" id="agora_remote'+stream.getId()+'" style="float:left; width:100%;height:450px; margin-top: -150px; display:inline-block;"></div>');
			}
			stream.play('agora_remote' + stream.getId());
		});

		client.on('stream-removed', function (evt) {
			var stream = evt.stream;
			stream.stop();
			$('#agora_remote' + stream.getId()).remove();
			console.log("Remote stream is removed " + stream.getId());
		});

		client.on('peer-leave', function (evt) {
			var stream = evt.stream;
			if (stream) {
			stream.stop();
			$('#agora_remote' + stream.getId()).remove();
			console.log(evt.uid + " leaved from this channel");
			}
		});
		}

		function leave() {
		document.getElementById("leave").disabled = true;
		client.leave(function () {
			console.log("Leavel channel successfully");
		}, function (err) {
			console.log("Leave channel failed");
		});
		}


		function muteAudio()
		{
		document.getElementById("unmuteAudio").disabled = false;
		document.getElementById("muteAudio").disabled = true;
		//localStream.disableAudio();
		localStream.disableAudio();
		}
		function unmuteAudio()
		{
		document.getElementById("unmuteAudio").disabled = true;
		document.getElementById("muteAudio").disabled = false;
		localStream.enableAudio();
		}

		function enableVideo()
		{
		document.getElementById("disableVideo").disabled = false;
		document.getElementById("enableVideo").disabled = true;
		localStream.enableVideo();

		}
		function disableVideo()
		{
		document.getElementById("disableVideo").disabled = true;
		document.getElementById("enableVideo").disabled = false;
		localStream.disableVideo();
		}

		function getDevices() {
		AgoraRTC.getDevices(function (devices) {
			for (var i = 0; i !== devices.length; ++i) {
			var device = devices[i];
			var option = document.createElement('option');
			option.value = device.deviceId;
			if (device.kind === 'audioinput') {
				option.text = device.label || 'microphone ' + (audioSelect.length + 1);
				audioSelect.appendChild(option);
			} else if (device.kind === 'videoinput') {
				option.text = device.label || 'camera ' + (videoSelect.length + 1);
				videoSelect.appendChild(option);
			} else {
				console.log('Some other kind of source/device: ', device);
			}
			}
		});
		}

		//audioSelect.onchange = getDevices;
		//videoSelect.onchange = getDevices;
		getDevices();
	</script>
	
	<script src="/jquery-2.2.4.min.js"></script>
	<script src="/socket.io.js"></script>
	<script>
		var socket = io('http://localhost:8080');
	</script>
	<script src="/ques.js"></script>
</body>
</html>
